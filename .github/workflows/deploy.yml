name: CD to EC2 (docker)

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build image
        run: docker build -t $IMAGE_NAME:${IMAGE_TAG} .

      - name: Push image
        run: docker push $IMAGE_NAME:${IMAGE_TAG}

      - name: known_hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key
          chmod 600 ec2_key

      - name: Deploy on EC2
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          ssh -i ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' << 'EOF'
          set -e

          sudo apt-get update -y || sudo dnf -y update
          if ! command -v docker >/dev/null; then
            sudo apt-get install -y docker.io || sudo dnf -y install docker
            sudo systemctl enable --now docker
            sudo usermod -aG docker $USER || true
          fi
          # docker compose plugin
          if ! docker compose version >/dev/null 2>&1; then
            sudo apt-get install -y docker-compose-plugin || true
          fi

          mkdir -p /opt/databases-lab-5
          cd /opt/databases-lab-5

          # .env з секретів
          cat > .env <<EENV
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_NAME=${DB_NAME}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
SECRET_KEY=${SECRET_KEY}
EENV

          # docker-compose.yml якщо відсутній
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml <<'DC'
services:
  web:
    image: ${IMAGE_NAME}:${IMAGE_TAG}
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "80:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s
DC
          else
            sed -i "s|^\s*image:.*$|    image: ${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml
          fi

          echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
          docker pull ${IMAGE_NAME}:${IMAGE_TAG}
          docker compose up -d
          docker image prune -f
          EOF
