name: CD to EC2 (docker)

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build image
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" .

      - name: Push image
        run: docker push "$IMAGE_NAME:$IMAGE_TAG"

      - name: Add EC2 to known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key
          chmod 600 ec2_key

      - name: Deploy on EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          ssh -i ec2_key "${EC2_USER}@${EC2_HOST}" 'bash -s' << EOF
          set -e

          # --- docker & compose ---
          if ! command -v docker >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose-plugin curl
            else
              sudo dnf -y update || true
              sudo dnf -y install docker curl
            fi
            sudo systemctl enable --now docker
          fi
          if ! sudo docker compose version >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get install -y docker-compose-plugin
            fi
          fi

          # --- робоча папка + права ---
          sudo mkdir -p /opt/databases-lab-5
          sudo chown -R \$USER:\$USER /opt/databases-lab-5
          cd /opt/databases-lab-5

          # --- .env (секрети з GitHub) ---
          cat > .env <<EENV
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          SECRET_KEY=${SECRET_KEY}
          EENV

          # --- docker-compose.yml (створити або оновити) ---
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml <<DC
          services:
            web:
              image: ${IMAGE_NAME}:${IMAGE_TAG}
              restart: unless-stopped
              env_file:
                - .env
              ports:
                - "80:8080"
              command: >
                gunicorn -w 2 -k gthread -t 60 -b 0.0.0.0:8080 "app:create_app()"
              healthcheck:
                test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
                interval: 20s
                timeout: 5s
                retries: 5
                start_period: 20s
          DC
          else
            # оновити тег образу
            sed -i "s|^\\(\\s*image:\\s*\\).*|\\1${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml
            # (опційно) гарантуємо правильну команду запуску
            if ! grep -q 'app:create_app()' docker-compose.yml; then
              yq -i '.services.web.command = "gunicorn -w 2 -k gthread -t 60 -b 0.0.0.0:8080 \"app:create_app()\""' docker-compose.yml || \
              sed -i 's|command:.*|command: >\n      gunicorn -w 2 -k gthread -t 60 -b 0.0.0.0:8080 "app:create_app()"|g' docker-compose.yml
            fi
          fi

          # --- login + pull + restart ---
          echo "${GHCR_TOKEN}" | sudo docker login ghcr.io -u "${GHCR_USER}" --password-stdin
          sudo docker pull "${IMAGE_NAME}:${IMAGE_TAG}"
          sudo docker compose up -d
          sudo docker image prune -f

          # --- життєвий мінімум перевірки ---
          sleep 2
          curl -fsS http://localhost:8080/healthz || true
          EOF
