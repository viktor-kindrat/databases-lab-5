- name: Deploy on EC2
  env:
    IMAGE_NAME: ${{ env.IMAGE_NAME }}
    IMAGE_TAG: ${{ env.IMAGE_TAG }}
    DB_HOST: ${{ secrets.DB_HOST }}
    DB_PORT: ${{ secrets.DB_PORT }}
    DB_NAME: ${{ secrets.DB_NAME }}
    DB_USER: ${{ secrets.DB_USER }}
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    SECRET_KEY: ${{ secrets.SECRET_KEY }}
    GHCR_USER: ${{ github.actor }}
    GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  run: |
    ssh -i ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' << 'EOF'
    set -e

    sudo apt-get update -y || sudo dnf -y update
    if ! command -v docker >/dev/null 2>&1; then
      sudo apt-get install -y docker.io || sudo dnf -y install docker
      sudo systemctl enable --now docker
      sudo usermod -aG docker $USER || true
    fi
    if ! docker compose version >/dev/null 2>&1; then
      sudo apt-get install -y docker-compose-plugin || true
    fi

    mkdir -p /opt/databases-lab-5
    cd /opt/databases-lab-5

    # .env
    cat > .env <<EENV
    DB_HOST=${DB_HOST}
    DB_PORT=${DB_PORT}
    DB_NAME=${DB_NAME}
    DB_USER=${DB_USER}
    DB_PASSWORD=${DB_PASSWORD}
    SECRET_KEY=${SECRET_KEY}
    EENV

    # docker-compose.yml якщо відсутній
    if [ ! -f docker-compose.yml ]; then
      cat > docker-compose.yml <<'DC'
    services:
      web:
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        restart: unless-stopped
        env_file:
          - .env
        ports:
          - "80:8080"
        healthcheck:
          test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
          interval: 20s
          timeout: 5s
          retries: 5
          start_period: 20s
    DC
    else
      # оновлюємо тег образу
      sed -i "s|^\s*image:.*$|        image: ${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml
    fi

    echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
    docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    docker compose up -d
    docker image prune -f
    EOF
